{"version":3,"file":"message.js","sourceRoot":"","sources":["../src/message.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, css, LitElement } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\n\n\n@customElement('message-test')\nexport class Maessage extends LitElement {\n    static styles = css`p { color: blue }`;\n\n    @property()\n    canTryConnect = true;//接続可能な状態か管理\n\n    @property()\n    connected = false;\n\n    @property()\n    localMessages = '';\n\n    @property()\n    defaultMyUserId = Math.random().toString(32).substring(2);\n\n    @query('#InputMyUserId', true) InputMyUserIdElement!: HTMLInputElement;\n    @query('#InputSendUserId', true) InputSendUserIdElement!: HTMLInputElement;\n\n    @property()\n    nowSignaling = false;//相手とシグナリング可能な状態か\n\n    myUserID: string = '';\n    sendUserID: string = '';\n    webRTCConnection: any;\n    webRTCChannel: any;\n    remoteChannel: any;\n    ws: any;\n\n    //ws部\n    wsConnect(url: string) {\n        return new Promise((resolve, reject) => {\n            let ws = new WebSocket(url);\n            ws.onopen = (event:any) => {\n                console.log(\"connected\", event);\n                resolve(ws);\n            };\n            ws.onerror = (event: any) => {\n                console.log(\"error\", event);\n                reject(event);\n            };\n        })\n    }\n\n    wsOnMessage = (event: any): void => {\n        console.log(\"message\", event);\n        let eventData:any = JSON.parse(event.data);\n        console.log(\"eventData\", eventData);\n        // 以下の処理を別関数で分割させたいな\n        if (eventData.from == \"server\") {//server からのイベント\n            if (eventData.eventType == \"getUserState\" ) {\n                if (eventData.data.userId == this.sendUserID) {\n                     if (eventData.data.state == \"connecting\" && this.nowSignaling == false) {\n                        //接続処理 RTCPeerConnection.signalingState が同時に have-local-offer へ遷移する問題のため、現在は getUserState を実行した後者側から、offer を送り始める協定で\n                         // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/signalingState\n                        console.log(\"userID:\", eventData.data.userId, \"is connecting signaling point. start signaling\");\n                        \n                         this.initLocalOffer();\n                    }\n                    \n                }\n            }\n        } else if (eventData.from == this.sendUserID) {\n            if (eventData.eventType == \"sendLocalOffer\") {\n                console.log(\"get LocalOffer from \", this.sendUserID);\n                this.initRemoteAnswer(eventData.data.localOffer);\n            } else if (eventData.eventType == \"sendRemoteAnswer\") {\n                console.log(\"get remoteAnswer from\", this.sendUserID);\n                this.webRTCConnection.setRemoteDescription(eventData.data.remoteAnswer);\n            }\n            else if (eventData.eventType == \"sendICECandidate\") {\n                console.log(\"get remote ICECandidate from\", this.sendUserID);\n                this.webRTCConnection.addIceCandidate(eventData.data.ICECandidate);\n            }\n        }\n        \n    }\n\n    wsOnClose = (event: any): void => {\n        console.log(\"close\", event);\n        this.canTryConnect = true;\n    }\n\n    //webrtc 部\n    disconnect() {\n        this.webRTCConnection.close();\n    }\n\n    async connect() {\n        console.log('connect!だよんね');\n        \n        // webrtc RTCPeerConnection の初期設定\n        \n        this.webRTCConnection = new RTCPeerConnection({\n            iceServers: [\n                {\n                    urls: \"stun:stun.l.google.com:19302\"\n                }\n            ]\n        });\n        this.webRTCConnection.addEventListener('icecandidate', async (e: any) => {\n            console.log('local connection ICE candidate: ', e.candidate);\n            //\n            if (e.candidate) {\n                let message: any = { sendToUserid: this.sendUserID, eventType: \"sendICECandidate\", data: { ICECandidate: e.candidate } };\n                this.ws.send(JSON.stringify(message));\n            }\n        });\n\n        this.webRTCConnection.addEventListener('datachannel', this._onRemoteDataChannel.bind(this));\n\n        // シグナリングのための websocket 接続\n        this.myUserID = this.InputMyUserIdElement.value.trim();// input からユーザidの取得\n        this.canTryConnect = false;//false にすることで、input を編集できなく、再度connectできないようにする\n\n        console.log('my user id',this.myUserID);\n        this.ws = await this.wsConnect(\"ws://localhost:8100/?userid=\" + this.myUserID);\n        this.ws.onmessage = this.wsOnMessage;\n        this.ws.onclose = this.wsOnClose;\n\n        this.sendUserID = this.InputSendUserIdElement.value.trim();// input からユーザidの取得\n        \n        // webSocket 接続処理\n        let message: any = { sendToUserid: 'server', eventType: \"getUserState\", data: { userId: this.sendUserID } };\n        this.ws.send(JSON.stringify(message));\n\n        message = { sendToUserid: 'server', eventType: \"subscribeUserStateChange\", data: { userId: this.sendUserID } };\n        this.ws.send(JSON.stringify(message));\n        \n        //あとは、wsOnMessage で相手が connecting になった時に処理をする\n    }\n\n    _onLocalMessageReceived(event:any) {\n        console.log(`Remote message received by: ${event.data}`);\n        this.localMessages += event.data + '\\n';\n    }\n    _onRemoteDataChannel(event: any) {\n        console.log(`onRemoteDataChannel: ${JSON.stringify(event)}`);\n        this.remoteChannel = event.channel;\n        this.remoteChannel.binaryType = 'arraybuffer';\n        this.remoteChannel.addEventListener('message', this._onLocalMessageReceived.bind(this));\n        this.remoteChannel.addEventListener('close', () => {\n            console.log('Remote channel closed!');\n            this.connected = false;\n        });\n    }\n\n    async initLocalOffer() {\n            //init 側が datachanel を作成する\n            const dataChannelParams = { ordered: true };\n            this.webRTCChannel = this.webRTCConnection\n                .createDataChannel('messaging-channel', dataChannelParams);\n            this.webRTCChannel.binaryType = 'arraybuffer';\n            this.webRTCChannel.addEventListener('open', () => {\n                console.log('channel open!');\n                this.connected = true;\n                this.webRTCChannel.send(\"hi you!\");\n            });\n            this.webRTCChannel.addEventListener('close', () => {\n                console.log('channel closed!');\n                this.connected = false;\n                //this.canTryConnect = true;//遷移ロジック未実装\n            });\n            this.webRTCChannel.addEventListener('message', this._onLocalMessageReceived.bind(this));\n\n            //localoffer を作成\n            const localOffer = await this.webRTCConnection.createOffer();\n            console.log(`Got local offer ${JSON.stringify(localOffer)} and send to ${this.sendUserID}`);\n\n            //localoffer を送信\n            let message: any = { sendToUserid: this.sendUserID, eventType: \"sendLocalOffer\", data: { localOffer: localOffer } };\n            this.ws.send(JSON.stringify(message));\n\n            await this.webRTCConnection.setLocalDescription(localOffer);\n        \n    };\n    async initRemoteAnswer(localOffer: any) {\n            await this.webRTCConnection.setRemoteDescription(localOffer);\n        \n            const remoteAnswer = await this.webRTCConnection.createAnswer();\n            console.log(`Got remote answer ${JSON.stringify(remoteAnswer)} and send to ${this.sendUserID}`);\n\n            //remoteAnswer を送信\n            let message: any = { sendToUserid: this.sendUserID, eventType: \"sendRemoteAnswer\", data: { remoteAnswer: remoteAnswer } };\n            this.ws.send(JSON.stringify(message));\n            \n            await this.webRTCConnection.setLocalDescription(remoteAnswer);\n    };\n\n\n        render() {\n            return html`<section>\n        <div>\n        My userid\n        <input type=\"text\" id='InputMyUserId' ?disabled=${!this.canTryConnect} value=${this.defaultMyUserId} />\n      </div>\n       <div>\n        Send userid\n        <input type=\"text\" id='InputSendUserId' ?disabled=${!this.canTryConnect} value='myswitch' />\n      </div>\n  \n            <div>\n      <button ?disabled=\"${this.connected || !this.canTryConnect}\" @click=\"${this.connect.bind(this)}\">Connect</button>\n      <button ?disabled=\"${!this.connected}\" @click=\"${this.disconnect.bind(this)}\">Disconnect</button>\n  </div>\n\n</section>`;\n        }\n    }\n"]}